---
import { Icon } from "astro-icon";

const { tags, contentType } = Astro.props;

interface TagStyle {
	displayText: string;
	btnClasses: string;
	icon?: string;
	iconClasses?: string;
	importance?: number;
}

interface TagStyles {
	[key: string]: TagStyle;
}

const tagStyles: TagStyles = {
	astro: {
		displayText: "Astro",
		btnClasses: "bg-[#3f4252] text-[#fff]",
		icon: "astro",
		importance: 5,
	},
	html: {
		displayText: "HTML",
		btnClasses: "bg-[#E34F26] text-[#fff]",
		icon: "simple-icons:html5",
		importance: 10,
	},
	javascript: {
		displayText: "JavaScript",
		btnClasses: "bg-[#F7DF1E] text-[#000]",
		icon: "simple-icons:javascript",
		importance: 10,
	},
	typescript: {
		displayText: "TypeScript",
		btnClasses: "bg-[#007ACC] text-[#fff]",
		icon: "simple-icons:typescript",
		importance: 10,
	},
	css: {
		displayText: "CSS",
		btnClasses: "bg-[#1572B6] text-[#fff]",
		icon: "simple-icons:css3",
		importance: 10,
	},
	python: {
		displayText: "Python",
		btnClasses: "bg-[#1572B6] text-[#fff]",
		icon: "simple-icons:python",
		iconClasses: "text-[#FFDD54]",
		importance: 10,
	},
	react: {
		displayText: "React",
		btnClasses: "bg-[#61DAFB] text-[#000]",
		icon: "simple-icons:react",
		importance: 9,
	},
	resume: {
		displayText: "Resume",
		btnClasses: "btn-outline",
		importance: 10,
	},
	certificates: {
		displayText: "Certificates",
		btnClasses: "btn-outline",
		importance: 9,
	},
	pdf: {
		displayText: "PDF",
		btnClasses: "btn-outline",
		importance: 8,
	},
	documents: {
		displayText: "Documents",
		btnClasses: "btn-outline",
		importance: 8,
	},
	agile: {
		displayText: "Agile",
		btnClasses: "btn-outline",
		importance: 7,
	},
	scrum: {
		displayText: "Scrum",
		btnClasses: "btn-outline",
		importance: 6,
	},
	"itil 4": {
		displayText: "ITIL 4",
		btnClasses: "btn-outline",
		importance: 5,
	},
	psm1: {
		displayText: "PSM1",
		btnClasses: "btn-outline",
		importance: 5,
	},
};

function getUrlPrefix(contentType: string): string {
	switch (contentType) {
		case "projects":
			return "/portfolio/tags/";
		case "posts":
			return "/blog/tags/";
		case "resources":
			return "/resources/tags/";
		default:
			return "/blog/tags/";
	}
}

function getTagDisplayAndClass(tag: string): TagStyle {
	const lowerCaseTag = tag.toLowerCase();
	return tagStyles[lowerCaseTag] || { displayText: tag, btnClasses: "btn-outline" };
}

tags.sort((a: string, b: string) => {
	const importanceA = tagStyles[a.toLowerCase()]?.importance || 0;
	const importanceB = tagStyles[b.toLowerCase()]?.importance || 0;

	if (importanceA > 0 && importanceB > 0) {
		return importanceB - importanceA;
	} else if (importanceA > 0) {
		return -1;
	} else if (importanceB > 0) {
		return 1;
	}
	return 0;
});

const visibleTags = tags.slice(0, 10);
const hiddenTags = tags.slice(10);
---

<div class="my-4 flex flex-wrap justify-center gap-2" data-pagefind-ignore="all">
	{
		visibleTags.map((tag: string) => {
			const { displayText, btnClasses, icon, iconClasses } = getTagDisplayAndClass(tag);
			const urlPrefix = getUrlPrefix(contentType);

			return (
				<a
					href={`${urlPrefix}${tag}`}
					title={`Filter by ${tag} Tag`}
					class={`btn ${btnClasses} btn-sm ${iconClasses ? `text-[${iconClasses}]` : ""}`}
				>
					{icon && <Icon name={icon} class={`mr-0 h-4 w-4 ${iconClasses}`} />}
					{displayText}
				</a>
			);
		})
	}
</div>
<div class="flex justify-center">
	{
		hiddenTags.length > 0 && (
			<details class="collapse bg-base-100">
				<summary
					title="Open/Close Dropdown to View All Other Tags"
					class="collapse-title p-4 text-center text-lg font-medium"
				>
					View All Other Tags
				</summary>
				<div class="collapse-content">
					<div class="flex flex-wrap justify-center gap-2">
						{hiddenTags.map((tag: string) => {
							const { displayText, btnClasses, icon, iconClasses } = getTagDisplayAndClass(tag);
							const urlPrefix = getUrlPrefix(contentType);

							return (
								<a
									href={`${urlPrefix}${tag}`}
									title={`Filter by ${tag} Tag`}
									class={`btn ${btnClasses} btn-sm ${iconClasses ? `text-[${iconClasses}]` : ""}`}
								>
									{icon && <Icon name={icon} class={`mr-0 h-4 w-4 ${iconClasses}`} />}
									{displayText}
								</a>
							);
						})}
					</div>
				</div>
			</details>
		)
	}
</div>
