---
import AstroLogo from "../../icons/logos/AstroLogo.astro";
import HTMLLogo from "../../icons/logos/HTMLLogo.astro";
import CSSLogo from "../../icons/logos/CSSLogo.astro";
import JavaScriptLogo from "../../icons/logos/JavaScriptLogo.astro";
import ReactLogo from "../../icons/logos/ReactLogo.astro";
import PythonLogo from "../../icons/logos/PythonLogo.astro";
import JupyterLogo from "../../icons/logos/JupyterLogo.astro";

const { tags, contentType } = Astro.props;

interface TagModifications {
	displayText?: string;
	fill?: string;
	btnClasses?: string;
	iconClasses?: string;
	importance?: number;
}

interface TagDetails {
	[key: string]: TagModifications;
}

const iconComponents: { [key: string]: any } = {
	astro: AstroLogo,
	html: HTMLLogo,
	css: CSSLogo,
	javascript: JavaScriptLogo,
	react: ReactLogo,
	python: PythonLogo,
	"jupyter notebook": JupyterLogo,
};

const tagDetails: TagDetails = {
	astro: {
		btnClasses: "bg-[#3f4252] text-[#ffffff]",
		importance: 5,
	},
	html: {
		fill: "#E34F26",
		btnClasses: "bg-[#F8F8F2] text-[#000000] btn-outline border-[#E34F26] border-4",
		importance: 10,
	},
	javascript: {
		btnClasses: "bg-[#F7DF1E] text-[#000000]",
		importance: 10,
	},
	typescript: {
		btnClasses: "bg-[#007ACC] text-[#ffffff]",
		importance: 10,
	},
	css: {
		btnClasses: "bg-[#1572B6] text-[#ffffff]",
		importance: 10,
	},
	python: {
		fill: "#FFDD54",
		btnClasses: "bg-[#1572B6] text-[#ffffff]",
		importance: 10,
	},
	react: {
		btnClasses: "bg-[#61DAFB] text-[#000000]",
		importance: 9,
	},
	resume: {
		displayText: "Resume",
		importance: 10,
	},
	certificates: {
		displayText: "Certificates",
		importance: 9,
	},
	pdf: {
		displayText: "PDF",
		importance: 8,
	},
	documents: {
		displayText: "Documents",
		importance: 8,
	},
	agile: {
		displayText: "Agile",
		importance: 7,
	},
	scrum: {
		displayText: "Scrum",
		importance: 6,
	},
	"itil 4": {
		displayText: "ITIL 4",
		importance: 5,
	},
	psm1: {
		displayText: "PSM1",
		importance: 5,
	},
	"jupyter notebook": {
		fill: "#F37726",
		btnClasses: "bg-[#44475A] text-[#ffffff]",
	},
};

function getUrlPrefix(contentType: string): string {
	switch (contentType) {
		case "projects":
			return "/portfolio/tags/";
		case "posts":
			return "/blog/tags/";
		case "resources":
			return "/resources/tags/";
		default:
			return "/blog/tags/";
	}
}

function getTagDisplayAndClass(tag: string): TagModifications {
	const lowerCaseTag = tag.toLowerCase();
	const tagModifications = tagDetails[lowerCaseTag] || {};

	return {
		displayText: tagModifications.displayText || tag,
		btnClasses: tagModifications.btnClasses || "btn-outline",
		fill: tagModifications.fill,
	};
}

tags.sort((a: string, b: string) => {
	const importanceA = tagDetails[a.toLowerCase()]?.importance || 0;
	const importanceB = tagDetails[b.toLowerCase()]?.importance || 0;

	if (importanceA > 0 && importanceB > 0) {
		return importanceB - importanceA;
	} else if (importanceA > 0) {
		return -1;
	} else if (importanceB > 0) {
		return 1;
	}
	return 0;
});

const visibleTags = tags.slice(0, 10);
const hiddenTags = tags.slice(10);
---

<div class="flex flex-wrap justify-center gap-2" data-pagefind-ignore="all">
	{
		visibleTags.map((tag: string) => {
			const { displayText, btnClasses, fill } = getTagDisplayAndClass(tag);
			const IconComponent = iconComponents[tag.toLowerCase()];
			const urlPrefix = getUrlPrefix(contentType);
			return (
				<a
					href={`${urlPrefix}${tag}`}
					title={`Filter by ${tag} Tag`}
					class={`btn ${btnClasses} btn-sm`}
				>
					{IconComponent && <IconComponent size="16" fill={fill} />}
					{displayText}
				</a>
			);
		})
	}
</div>
{
	hiddenTags.length > 0 && (
		<>
			<hr class="mx-8 my-4" />
			<div class="flex justify-center">
				<details class="collapse bg-base-300">
					<summary
						title="Open/Close Dropdown to View All Other Tags"
						class="font-semi-bold h-auto cursor-pointer bg-base-200 py-4 text-center text-lg text-base-content"
					>
						View All Other Tags
					</summary>
					<div class="collapse-content bg-base-200 p-4">
						<div class="flex flex-wrap justify-center gap-2">
							{hiddenTags.map((tag: string) => {
								const { displayText, btnClasses, fill } = getTagDisplayAndClass(tag);
								const IconComponent = iconComponents[tag.toLowerCase()];
								const urlPrefix = getUrlPrefix(contentType);

								return (
									<a
										href={`${urlPrefix}${tag}`}
										title={`Filter by ${tag} Tag`}
										class={`btn ${btnClasses} btn-sm`}
									>
										{IconComponent && <IconComponent size="16" fill={fill} />}
										{displayText}
									</a>
								);
							})}
						</div>
					</div>
				</details>
			</div>
		</>
	)
}
