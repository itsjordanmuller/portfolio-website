---
import { Icon } from "astro-icon";
---

<label
	for="theme-toggle"
	id="theme-toggle-label"
	class="btn btn-square btn-ghost swap swap-rotate active:bg-base-300"
	tabindex="0"
>
	<input
		type="checkbox"
		name="theme-toggle"
		id="theme-toggle"
		value="dracula"
		class="theme-controller"
		aria-label="Light/Dark Mode Toggle"
		tabindex="-1"
	/>
	<div
		class="tooltip tooltip-bottom absolute right-20 top-8"
		id="tooltip-text"
		data-tip="Dark Mode Toggle"
	>
	</div>
	<Icon
		name="ph:sun-bold"
		class="swap-on h-6 w-6 fill-current"
		title="Activate Dark Mode"
		alt="Light"
	/>
	<Icon
		name="ph:moon-bold"
		class="swap-off h-6 w-6 fill-current"
		title="Activate Light Mode"
		alt="Dark"
	/>
</label>

<script is:inline>
	let tooltipTimeout;

	const getInitialTheme = () => {
		if (typeof localStorage !== "undefined" && localStorage.getItem("theme")) {
			return localStorage.getItem("theme");
		}
		if (window.matchMedia("(prefers-color-scheme: dark)").matches) {
			return "dark";
		}
		return "light";
	};

	const setThemeAttribute = (theme) => {
		document.documentElement.setAttribute(
			"data-theme",
			theme === "dark" ? "dracula" : "dracula-light",
		);
		document
			.getElementById("tooltip-text")
			.setAttribute("data-tip", theme === "dark" ? "Dark Mode Activated" : "Light Mode Activated");
	};

	const applyInitialThemeClass = (theme) => {
		const element = document.documentElement;
		element.classList.remove("dark", "light");
		element.classList.add(theme);

		const toggleLabel = document.getElementById("theme-toggle-label");
		if (theme === "dark") {
			toggleLabel.classList.add("swap-active");
		} else {
			toggleLabel.classList.remove("swap-active");
		}
	};

	const theme = getInitialTheme();
	setThemeAttribute(theme);
	applyInitialThemeClass(theme);

	const showTooltipTemporarily = () => {
		const tooltip = document.getElementById("tooltip-text");
		tooltip.classList.add("tooltip-open");

		clearTimeout(tooltipTimeout);

		tooltipTimeout = setTimeout(() => {
			tooltip.classList.remove("tooltip-open");
		}, 1000);
	};

	const handleToggleClick = () => {
		const element = document.documentElement;
		const isDark = !element.classList.contains("dark");
		const newTheme = isDark ? "dark" : "light";
		localStorage.setItem("theme", newTheme);
		setThemeAttribute(newTheme);
		applyInitialThemeClass(newTheme);
		showTooltipTemporarily();
	};

	const handleKeyboardToggle = (event) => {
		if (event.key === "Enter" || event.key === " ") {
			event.preventDefault();
			themeCheckbox.checked = !themeCheckbox.checked;
			handleToggleClick();
		}
	};

	const themeCheckbox = document.getElementById("theme-toggle");
	const themeCheckboxLabel = document.getElementById("theme-toggle-label");
	themeCheckbox.checked = theme === "dark";
	themeCheckbox.addEventListener("change", handleToggleClick);
	themeCheckbox.addEventListener("keydown", handleKeyboardToggle);
	themeCheckboxLabel.addEventListener("keydown", handleKeyboardToggle);
</script>

<style>
	.tooltip:after {
		transform: translateX(-50%);
		left: 55px;
	}
</style>
